//
//  LoginWorker.swift
//  SampleCS
//
//  Created by Adam Johnston on 08/11/2018.
//  Copyright (c) 2018 Adam Johnston. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FBSDKCoreKit
import FBSDKLoginKit
import Firebase

class LoginWorker
{
    let db = Firestore.firestore()
    var interactor: LoginInteractor?
    
    func doSomeWork()
    {
        let request = Login.Something.Request()
        var response = Login.Something.Response(alreadyLoggedIn: false)
        if(request.token != nil){
            response.alreadyLoggedIn = false
        }
        else{
            response.alreadyLoggedIn = true
        }
    }
    
    func checkViewShowing()
    {
        let request = Login.Something.AddUserToggleScreen(showUserScreen: false)
        if(request.showUserScreen == true){
            //            response.alreadyLoggedIn = false
        }
        else{
            //            response.alreadyLoggedIn = true
        }
    }
    
    func addUserToFirebase(details : Login.Something.RegisterModel, currentInteractor: LoginInteractor){
        Auth.auth().createUser(withEmail: details.email, password: details.password) { (authResult, error) in
            if((error) == nil)
            {
                let result : AuthDataResult = authResult!
                //                self.registerView.isHidden = true
                var ref: DocumentReference? = nil
                ref = self.db.collection("users").addDocument(data: [
                    "Userid": result.user.uid,
                    "email": result.user.email
                ]) { err in
                    if let err = err {
                        print("Error adding document: \(err)")
                    } else {
                        print("Document added with ID: \(ref!.documentID)")
                        currentInteractor.returnedSuccessful(result: result)
                    }}
            }
        }
    }
    
    func loginUserToFirebase(details : Login.Something.RegisterModel, currentInteractor: LoginInteractor){
        Auth.auth().signIn(withEmail: details.email, password: details.password) { (user, error) in
            if let error = error {
                print(error.localizedDescription)
                return
            }
            else{
                let result : AuthDataResult = user!
                currentInteractor.loginSuccessful(result: result)
            }
        }
    }
    
    func loginUserToFirebaseFacebook(_ loginButton: FBSDKLoginButton!, currentInteractor: LoginInteractor){
        var response = Login.Something.PlayerModel()

        let credential = FacebookAuthProvider.credential(withAccessToken: FBSDKAccessToken.current().tokenString)
        Auth.auth().signInAndRetrieveData(with: credential) { (authResult, error) in
            if let error = error {
                // ...
                return
            } else {
                let result : AuthDataResult = authResult!
                var ref: DocumentReference? = nil
                response.email = result.user.email!
                response.userId = result.user.uid
                
            }
        }
    }
    
    func getGroupIDFromUserID(details : Login.Something.PlayerModel, currentInteractor: LoginInteractor){
        var dict : NSDictionary = NSDictionary.init()
        db.collection("users").whereField("Userid", isEqualTo: details.userId)
            .getDocuments() { (querySnapshot, err) in
                if let err = err {
                    print("Error getting documents: \(err)")
                } else {
                    for document in querySnapshot!.documents {
                        print("\(document.documentID) => \(document.data())")
                        dict = document.data() as NSDictionary
                    }
                    currentInteractor.successfulGroupRetrieve(player: dict, currentInteractor: currentInteractor)
                }
        }
    }
}
