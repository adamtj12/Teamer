//  LoginViewController.swift
//  SampleCS
//
//  Created by Adam Johnston on 08/11/2018.
//  Copyright (c) 2018 Adam Johnston. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com

import UIKit
import FBSDKCoreKit
import FBSDKLoginKit
import Firebase
import FirebaseAuth

protocol LoginDisplayLogic: class
{
    func displaySomething(viewModel: Login.Something.PlayerModel)
    func toggleAddUserView(show: Login.Something.AddUserToggleScreen)
    func addPlayer(show: Login.Something.PlayerModel)
    func loginPlayer(show: Login.Something.PlayerModel)
    func returnedGroupID(player: Login.Something.PlayerModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    var uid : String?
    var groupID : String?
    var playerLoggedInAs = Login.Something.PlayerModel()

    
    var link : String?
    
    @IBOutlet weak var userNameField: UITextField!
    @IBOutlet weak var passwordField: UITextField!
    @IBOutlet weak var userNameLoginButton: UIButton!
    @IBOutlet weak var registerView: UIView!
    @IBOutlet weak var registerUserField: UITextField!
    @IBOutlet weak var registerPasswordField: UITextField!
    @IBOutlet weak var button: FBSDKLoginButton!
    @IBOutlet weak var registerUserEmailAuthField: UITextField!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let destinationVC = segue.destination as? AddPlayerDetailsViewController {
                let array : Array<String> = [self.registerUserField.text!, uid!]
                destinationVC.router?.loginDetails = array
            }
            else {
                if let destinationVC = segue.destination as? TeamSelectionViewController {
                    destinationVC.router?.playerDetails.groupID = self.playerLoggedInAs.groupID
                    destinationVC.router?.playerDetails.firstName = self.playerLoggedInAs.firstName
                    destinationVC.router?.playerDetails.lastName = self.playerLoggedInAs.lastName
                    destinationVC.router?.playerDetails.email = self.playerLoggedInAs.email
                    destinationVC.router?.playerDetails.userRating = self.playerLoggedInAs.userRating
                    destinationVC.router?.playerDetails.teamOption = self.playerLoggedInAs.teamOption
                    destinationVC.router?.playerDetails.userId = self.playerLoggedInAs.userId
                    destinationVC.router?.playerDetails.teamCaptain = self.playerLoggedInAs.teamCaptain
                }
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        checkForAlreadyLoggedInStatus()
        if let link = UserDefaults.standard.value(forKey: "Link") as? String {
            self.link = link
        }

    }
    
    // MARK: - CheckLoginStatus
    func checkForAlreadyLoggedInStatus()
    {
        if ((FBSDKAccessToken.current()) != nil) {
            let request = Login.Something.Request()
            interactor?.doSomething(request: request)
        }else{
            let request = Login.Something.noTokenRequest()
            interactor?.doNothing(request: request)
        }
    }
    
    func displaySomething(viewModel: Login.Something.PlayerModel)
    {
        print("CLEAN SWIFT WORKING !!!!!!!!")
        //nameTextField.text = viewModel.name
    }
    
    // MARK - Login Functionality
    @IBAction func loginPressed(_ sender: Any) {
        var loginUser = Login.Something.RegisterModel()
        loginUser.email = self.userNameField.text!
        loginUser.password = self.passwordField.text!
        interactor?.loginToFirebase(add: loginUser, currentInteractor: interactor as! LoginInteractor)
    }
    
    func loginPlayer(show: Login.Something.PlayerModel) {
        print("CLEAN SWIFT WORKING !!!!!!!!")
        interactor?.getGroupToDisplayFromUser(add: show, currentInteractor: interactor as! LoginInteractor)
       // router?.routeToAddPlayerInfo()
    }
    
    func returnedGroupID(player: Login.Something.PlayerModel) {
        self.groupID = player.groupID
        playerLoggedInAs = player
        router?.routeToTeamSelection()
    }
    
    @IBAction func loginFacebookPressed(_ sender: Any) {
        interactor?.loginToFirebaseFacebook(loginButton: button, currentInteractor: interactor as! LoginInteractor)
    }
    
    // MARK: - AddUserFunctionality
    @IBAction func addUser(_ sender: Any) {
        self.registerView.isHidden = false
        self.navigationItem.title = "Register"
        let addUserShow = Login.Something.AddUserToggleScreen(showUserScreen: self.registerView.isHidden)
        interactor?.AddUserToggleScreen(showing: addUserShow)
    }
    
    @IBAction func hideAddUser(_ sender: Any) {
        self.registerView.isHidden = true
        let addUserShow = Login.Something.AddUserToggleScreen(showUserScreen: self.registerView.isHidden)
        interactor?.AddUserToggleScreen(showing: addUserShow)
    }
    
    func toggleAddUserView(show: Login.Something.AddUserToggleScreen)
    {
        if(show.showUserScreen == true){
            self.registerView.isHidden = true
        }
        else{
            self.registerView.isHidden = false
        }
    }
    
    @IBAction func registerPressed(_ sender: Any) {
        var registerUser = Login.Something.RegisterModel()
        registerUser.email = self.registerUserField.text!
        registerUser.password = self.registerPasswordField.text!
        interactor?.addUserToFirebase(add: registerUser, currentInteractor: interactor as! LoginInteractor)
    }
    
    @IBAction func registerWithEmailAuthPressed(_ sender: Any) {
        let actionCodeSettings = ActionCodeSettings()
        actionCodeSettings.url = URL(string: "https://teamerconfirmregistration.page.link/?link=https://www.example.com&efr=1")
        // The sign-in operation has to always be completed in the app.
        actionCodeSettings.handleCodeInApp = true
        actionCodeSettings.setIOSBundleID(Bundle.main.bundleIdentifier!)
        actionCodeSettings.setAndroidPackageName("com.example.android",
                                                 installIfNotAvailable: false, minimumVersion: "12")
        
        Auth.auth().sendSignInLink(toEmail:registerUserEmailAuthField.text!,
                                   actionCodeSettings: actionCodeSettings) { error in
                                    // ...
                                    if let error = error {
                                        return
                                    }
                                    UserDefaults.standard.set(self.registerUserEmailAuthField.text!, forKey: "Email")
        }
    }
    
    @IBAction func didTapSignInWithEmailLink(_ sender: AnyObject) {
        if let email = self.registerUserEmailAuthField.text {
            Auth.auth().signIn(withEmail: email, link: self.link!) { (user, error) in
                        if let error = error {
                            return
                        }
                self.router?.routeToSomewhere()
                }
        }
    }

    
    func addPlayer(show: Login.Something.PlayerModel) {
        uid = show.userId
        print("CLEAN SWIFT WORKING !!!!!!!!")
        router?.routeToSomewhere()
    }
}
