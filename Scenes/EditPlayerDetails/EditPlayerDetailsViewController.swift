//
//  EditPlayerDetailsViewController.swift
//  SampleCS
//
//  Created by Adam Johnston on 20/11/2018.
//  Copyright (c) 2018 Adam Johnston. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import FirebaseFirestore

protocol EditPlayerDetailsDisplayLogic: class
{
  func displaySomething(viewModel: EditPlayerDetails.Something.ViewModel)
}

class EditPlayerDetailsViewController: UITableViewController, EditPlayerDetailsDisplayLogic
{
  var interactor: EditPlayerDetailsBusinessLogic?
  var router: (NSObjectProtocol & EditPlayerDetailsRoutingLogic & EditPlayerDetailsDataPassing)?
  let db = Firestore.firestore()
  @IBOutlet weak var editButton: UIBarButtonItem!
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = EditPlayerDetailsInteractor()
    let presenter = EditPlayerDetailsPresenter()
    let router = EditPlayerDetailsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
  }
    
    // MARK: - Table view data source
    override func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return 5
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if(indexPath.row == 4){
            return 150
        }
        return 75
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "InfoCell", for: indexPath) as! PlayerInformationTableViewCell
        switch indexPath.row {
        case 0:
            cell.descriptLabel.text = "First Name:"
            cell.valueField.text = router?.player.firstName
        case 1:
            cell.descriptLabel.text = "Last Name:"
            cell.valueField.text = router?.player.lastName
        case 2:
            cell.descriptLabel.text = "Email:"
            cell.valueField.text = router?.player.email
        case 3:
            cell.descriptLabel.text = "Rating:"
            let userRating =  router?.player.userRating
            cell.ratingSlider.isHidden = false
            cell.valueField.isHidden = true
            cell.ratingSlider.value = Float(truncating: userRating!)
        case 4:
            cell.descriptLabel.text = "Team:"
            cell.teamSelectionDropDown.text = router?.player.teamOption
            cell.valueField.isHidden = true
            cell.teamSelectionDropDown.isHidden = false
        default:
            cell.descriptLabel.text = "First Name:"
            cell.valueField.text = router?.player.firstName
        }
        return cell
    }

  // MARK: Do something
  //@IBOutlet weak var nameTextField: UITextField!
  func doSomething()
  {
    let request = EditPlayerDetails.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: EditPlayerDetails.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}
