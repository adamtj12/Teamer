//
//  AddPlayerDetailsInteractor.swift
//  SampleCS
//
//  Created by Adam Johnston on 13/11/2018.
//  Copyright (c) 2018 Adam Johnston. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
protocol AddPlayerDetailsBusinessLogic
{
    func doSomething(request: AddPlayerDetails.Something.Request)
    func submitPlayerDetailsToServer(add : AddPlayerDetails.Something.PlayerModel , currentInteractor: AddPlayerDetailsInteractor)
    func playerDetailsAddedToServerSuccess(result : AddPlayerDetails.Something.PlayerModel , currentInteractor: AddPlayerDetailsInteractor)
    func checkIfTeamCaptainExists(check: AddPlayerDetails.Something.PlayerModel, currentInteractor: AddPlayerDetailsInteractor)
    func TeamCaptainExistsSuccess(response: AddPlayerDetails.Something.Response, currentInteractor: AddPlayerDetailsInteractor)
    func countUsersInTeam(request: AddPlayerDetails.Something.PlayerModel, currentInteractor: AddPlayerDetailsInteractor)
    func successfulCount(response: AddPlayerDetails.Something.ResponseGroups, currentInteractor: AddPlayerDetailsInteractor)
    func playerUpdatedSuccess(currentInteractor: AddPlayerDetailsInteractor)
}

protocol AddPlayerDetailsDataStore
{
    //var name: String { get set }
}

class AddPlayerDetailsInteractor: AddPlayerDetailsBusinessLogic, AddPlayerDetailsDataStore
{
    func submitPlayerDetailsToServer(add : AddPlayerDetails.Something.PlayerModel, currentInteractor: AddPlayerDetailsInteractor) {
        worker = AddPlayerDetailsWorker()
        self.worker?.submitPlayerDetailsToServer(details: add, currentInteractor: currentInteractor)
    }
    
    func playerDetailsAddedToServerSuccess(result: AddPlayerDetails.Something.PlayerModel, currentInteractor: AddPlayerDetailsInteractor) {
        presenter?.displayJoinTeam(showing: result)
    }
    
    var presenter: AddPlayerDetailsPresentationLogic?
    var worker: AddPlayerDetailsWorker?
    //var name: String = ""
    // MARK: Do something
    
    func doSomething(request: AddPlayerDetails.Something.Request)
    {
        worker = AddPlayerDetailsWorker()
        worker?.doSomeWork()
        let response = AddPlayerDetails.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    func checkIfTeamCaptainExists(check: AddPlayerDetails.Something.PlayerModel, currentInteractor: AddPlayerDetailsInteractor){
        worker = AddPlayerDetailsWorker()
        self.worker?.checkIfTeamHasCaptain(check: check, currentInteractor: currentInteractor)
    }
    
    func TeamCaptainExistsSuccess(response: AddPlayerDetails.Something.Response, currentInteractor: AddPlayerDetailsInteractor){
//        worker = AddPlayerDetailsWorker()
//        self.worker?.submitPlayerDetailsToServer(details: c, currentInteractor: currentInteractor)
        presenter?.presentAlreadyCaptainCheck(response: response)

    }

    func countUsersInTeam(request: AddPlayerDetails.Something.PlayerModel, currentInteractor: AddPlayerDetailsInteractor) {
        worker = AddPlayerDetailsWorker()
        worker?.countCurrentPlayers(details: request, currentInteractor: currentInteractor)
    }
    
    func successfulCount(response: AddPlayerDetails.Something.ResponseGroups, currentInteractor: AddPlayerDetailsInteractor) {
        presenter?.successfulPlayerCount(response: response)
    }
    
    func playerUpdatedSuccess(currentInteractor: AddPlayerDetailsInteractor) {
        presenter?.presentUpdateTeam()
    }

    

}
