//
//  JoinSquadViewController.swift
//  SampleCS
//
//  Created by Adam Johnston on 14/11/2018.
//  Copyright (c) 2018 Adam Johnston. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import FirebaseFirestore


protocol JoinSquadDisplayLogic: class
{
    func displaySomething(response: JoinSquad.Something.GroupModel, teamCountA : Int, teamCountB: Int)
    var groupModel : JoinSquad.Something.GroupModel? {get set}
    func successfulTeamJoin()
    func successfulTeamCount(response: JoinSquad.Something.ResponseGroups)
    func setToUnassignedIfTeamsFull()
}

class JoinSquadViewController: UITableViewController, JoinSquadDisplayLogic
{
    var groupModel: JoinSquad.Something.GroupModel?
    var groupResponse: JoinSquad.Something.ResponseGroups?
    var interactor: JoinSquadBusinessLogic?
    var router: (NSObjectProtocol & JoinSquadRoutingLogic & JoinSquadDataPassing)?
    let db = Firestore.firestore()
    var groupOptions : NSMutableArray = []
    var groupID : String = ""
    var teamCounterA : Int = 0, teamCounterB : Int = 0, teamCounterUnAssigned : Int = 0
    var userDetails = JoinSquad.Something.RequestToAdd()

    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = JoinSquadInteractor()
        let presenter = JoinSquadPresenter()
        let router = JoinSquadRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let destinationVC = segue.destination as? TeamSelectionViewController {
                destinationVC.router?.groupID = groupID
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        getGroups()
    }
    
    
    // MARK: Table lifecycle
    override func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return groupOptions.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: .value1, reuseIdentifier: "Cell")
        if(groupOptions.count > 0)
        {
            //            cell.textLabel!.text = group.value(forKey: "groupName") as! String
            let dict : NSDictionary = groupOptions.object(at: indexPath.row) as! NSDictionary
            cell.textLabel?.text = dict.value(forKey: "groupName") as? String
        }
        return cell
    }
    
    override  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath){
        let alert = UIAlertController(title: "Join Group?", message: "You want to join this group?", preferredStyle: UIAlertController.Style.alert)
        // add the actions (buttons)
        alert.addAction(UIAlertAction(title: "Yes", style: UIAlertAction.Style.default, handler: { action in
            print("Click of default button")
            self.userDetails.selectedGroup = (self.groupModel?.groupArray)?.object(at: indexPath.row) as! NSDictionary
            self.userDetails.userId = (self.router?.playerDetails.userId)!
            self.groupID = (self.userDetails.selectedGroup.value(forKey: "groupID") as? String)!
            let queue = DispatchQueue(label: "com.app.queue")
            queue.sync {
            self.interactor?.countUsersInTeam(request: self.userDetails, currentInteractor: self.interactor as! JoinSquadInteractor)
            }
        }))
        alert.addAction(UIAlertAction(title: "Cancel", style: UIAlertAction.Style.cancel, handler: nil))
        alert.addAction(UIAlertAction(title: "No", style: UIAlertAction.Style.destructive, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    // MARK: Build and Display Groups
    func getGroups()
    {
        let request = JoinSquad.Something.Request()
        interactor?.getGroups(request: request, currentInteractor: interactor as! JoinSquadInteractor)
    }
    func displaySomething(response: JoinSquad.Something.GroupModel, teamCountA: Int, teamCountB: Int)
    {
        groupOptions = response.groupArray
        groupModel = response
        self.tableView.reloadData()
    }
    
    func successfulTeamJoin() {
        router?.routeToSomewhere()
    }
    
    func successfulTeamCount(response: JoinSquad.Something.ResponseGroups) {
        teamCounterA = response.teamACount
        teamCounterB = response.teamBCount
        teamCounterUnAssigned = response.teamUnassignedCount
        groupResponse = response
        if(self.teamCounterA < 5 && (self.router?.playerDetails.teamOption)! == "Team A") {
            self.interactor?.addUserToGroup(request: self.userDetails, currentInteractor: self.interactor as! JoinSquadInteractor)
        }
        else if(self.teamCounterB < 5 && (self.router?.playerDetails.teamOption)! == "Team B"){
            self.interactor?.addUserToGroup(request: self.userDetails, currentInteractor: self.interactor as! JoinSquadInteractor)
        }
        else {
            self.interactor?.addUserToGroup(request: self.userDetails, currentInteractor: self.interactor as! JoinSquadInteractor)
        }
    }
    
    func setToUnassignedIfTeamsFull()
    {
        print("SUCCESS")
        self.interactor?.addUserToGroup(request: self.userDetails, currentInteractor: self.interactor as! JoinSquadInteractor)
        print("Teams are full , set to unassigned")
    }
}
