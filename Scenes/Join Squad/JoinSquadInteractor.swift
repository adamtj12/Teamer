//
//  JoinSquadInteractor.swift
//  SampleCS
//
//  Created by Adam Johnston on 14/11/2018.
//  Copyright (c) 2018 Adam Johnston. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol JoinSquadBusinessLogic
{
    func getGroups(request: JoinSquad.Something.Request, currentInteractor: JoinSquadInteractor)
    func ReturnGroups(result: JoinSquad.Something.ResponseGroups, currentInteractor: JoinSquadInteractor)
    func addUserToGroup(request: JoinSquad.Something.RequestToAdd, currentInteractor: JoinSquadInteractor)
    func countUsersInTeam(request: JoinSquad.Something.RequestToAdd, currentInteractor: JoinSquadInteractor)
    func successfulGroupAddition(currentInteractor: JoinSquadInteractor)
    func successfulCount(response: JoinSquad.Something.ResponseGroups, currentInteractor: JoinSquadInteractor)
    func playerUpdatedSuccess(currentInteractor: JoinSquadInteractor)
    func playerUpdate(request: JoinSquad.Something.PlayerModel, currentInteractor: JoinSquadInteractor)

}

protocol JoinSquadDataStore
{
    //var name: String { get set }
}

class JoinSquadInteractor: JoinSquadBusinessLogic, JoinSquadDataStore
{
    
    var presenter: JoinSquadPresentationLogic?
    var worker: JoinSquadWorker?
    //var name: String = ""
    // MARK: Do something
    func getGroups(request: JoinSquad.Something.Request, currentInteractor: JoinSquadInteractor)
    {
        worker = JoinSquadWorker()
        worker?.getDocuments(currentInteractor: currentInteractor)
    }
    
    func ReturnGroups(result: JoinSquad.Something.ResponseGroups, currentInteractor: JoinSquadInteractor) {
        presenter?.presentGroups(response: result)
    }
    
    func addUserToGroup(request: JoinSquad.Something.RequestToAdd, currentInteractor: JoinSquadInteractor) {
        worker = JoinSquadWorker()
        worker?.addPlayerToGroup(details: request, currentInteractor: currentInteractor)
    }
    
    func successfulGroupAddition(currentInteractor: JoinSquadInteractor) {
        presenter?.successfulPlayerAdd()
    }
    
    func countUsersInTeam(request: JoinSquad.Something.RequestToAdd, currentInteractor: JoinSquadInteractor) {
        worker = JoinSquadWorker()
        worker?.countCurrentPlayers(details: request, currentInteractor: currentInteractor)
    }
    
    func successfulCount(response: JoinSquad.Something.ResponseGroups, currentInteractor: JoinSquadInteractor) {
        presenter?.successfulPlayerCount(response: response)
    }
    
    func playerUpdatedSuccess(currentInteractor: JoinSquadInteractor) {
        presenter?.presentUpdateTeam()
    }
    
    func playerUpdate(request: JoinSquad.Something.PlayerModel, currentInteractor: JoinSquadInteractor) {
        worker = JoinSquadWorker()
        worker?.updateCurrentPlayerTeam(player: request, currentInteractor: currentInteractor)
    }

}
